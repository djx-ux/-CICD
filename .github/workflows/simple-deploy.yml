name: 🚀 一键部署到服务器

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:  # 允许手动触发

env:
  SERVER_HOST: 119.29.95.149
  SERVER_USER: root
  DEPLOY_PATH: /opt/gin-vue-admin

jobs:
  deploy:
    name: 部署到服务器
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
      
      - name: 🔑 配置 SSH 密钥
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
          echo "✅ SSH 密钥配置完成"
      
      - name: 🔌 测试 SSH 连接
        run: |
          echo "测试连接到: ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}"
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "echo '✅ SSH 连接成功！'"
      
      - name: 📁 创建部署目录
        run: |
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}"
          echo "✅ 部署目录已创建: ${{ env.DEPLOY_PATH }}"
      
      - name: 🔄 同步代码到服务器
        run: |
          echo "开始同步代码..."
          sudo apt-get update -qq
          sudo apt-get install -y -qq rsync
          
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='web/dist' \
            --exclude='web/node_modules' \
            --exclude='.github' \
            --exclude='*.md' \
            ./ ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/
          
          echo "✅ 代码同步完成"
      
      - name: 🐳 部署 Docker 容器
        run: |
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
            set -e
            
            echo "=========================================="
            echo "开始部署..."
            echo "=========================================="
            
            cd ${{ env.DEPLOY_PATH }}
            echo "📂 当前目录: $(pwd)"
            
            # 查找 docker-compose 文件
            if [ -f "deploy/docker-compose/docker-compose.yaml" ]; then
              COMPOSE_FILE="deploy/docker-compose/docker-compose.yaml"
              COMPOSE_DIR="deploy/docker-compose"
            elif [ -f "docker-compose.yaml" ]; then
              COMPOSE_FILE="docker-compose.yaml"
              COMPOSE_DIR="."
            else
              echo "❌ 找不到 docker-compose 文件"
              exit 1
            fi
            
            echo "🔧 使用配置: $COMPOSE_FILE"
            cd $COMPOSE_DIR
            
            # 停止并删除旧容器
            echo ""
            echo "⏹️  停止旧容器..."
            docker-compose -f docker-compose.yaml down || true
            
            # 清理
            echo "🧹 清理资源..."
            docker container prune -f || true
            
            # 构建镜像
            echo ""
            echo "🔨 构建 Docker 镜像..."
            docker-compose -f docker-compose.yaml build --no-cache
            
            # 启动容器
            echo ""
            echo "🚀 启动服务..."
            docker-compose -f docker-compose.yaml up -d
            
            # 等待服务启动
            echo ""
            echo "⏳ 等待服务启动（30秒）..."
            sleep 30
            
            # 显示容器状态
            echo ""
            echo "=========================================="
            echo "📊 容器状态:"
            echo "=========================================="
            docker-compose -f docker-compose.yaml ps
            
            echo ""
            echo "=========================================="
            echo "✅ 部署完成！"
            echo "=========================================="
          ENDSSH
      
      - name: ✅ 验证部署
        run: |
          ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'ENDSSH'
            echo ""
            echo "🔍 最终检查..."
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            echo ""
            echo "📋 运行中的容器数量:"
            docker ps | grep -c "Up" || echo "0"
          ENDSSH
      
      - name: 📍 显示访问信息
        if: success()
        run: |
          echo ""
          echo "=========================================="
          echo "🎉 部署成功！"
          echo "=========================================="
          echo ""
          echo "📍 访问地址:"
          echo "  🌐 前端: http://${{ env.SERVER_HOST }}:8080"
          echo "  🔧 后端: http://${{ env.SERVER_HOST }}:8888"
          echo ""
          echo "🔧 服务器管理:"
          echo "  SSH: ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}"
          echo "  日志: docker-compose -f ${{ env.DEPLOY_PATH }}/deploy/docker-compose/docker-compose.yaml logs -f"
          echo ""
      
      - name: ❌ 部署失败处理
        if: failure()
        run: |
          echo ""
          echo "=========================================="
          echo "❌ 部署失败！"
          echo "=========================================="
          echo ""
          echo "请检查:"
          echo "  1. GitHub Secret SERVER_SSH_KEY 是否正确配置"
          echo "  2. 服务器 SSH 是否可以连接"
          echo "  3. Docker 和 docker-compose 是否已安装"
          echo ""
          echo "查看详细日志:"
          echo "  ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}"
          echo "  cd ${{ env.DEPLOY_PATH }}"
          echo "  docker-compose logs"
          echo ""

